using System.Net;
using System.Net.Http.Json;
using Microsoft.EntityFrameworkCore;
using PenTest.Interfaces;
using Repository;
using Repository.Entities;

namespace PenTest.Services;

public class CveScanService(IHttpClientFactory factory, PgContext context) : ICveScanService
{
    private readonly Uri ShodanUri =  new Uri("https://internetdb.shodan.io");
    private const string AutoCheckName = "Vulns";

    public async Task<AutomaticCheckAuditRow> Scan(string domain)
    {
        var automaticCheck = await context.AutomaticChecks
            .Where(c => c.Name == AutoCheckName)
            .FirstAsync();

        try
        {
            var ipAddresses = await Dns.GetHostAddressesAsync(domain);
            var ip = ipAddresses[0]; // Use first resolved IP

            var httpClient = factory.CreateClient();
            httpClient.BaseAddress = ShodanUri;

            var response = await httpClient.GetAsync(ip.ToString());
            response.EnsureSuccessStatusCode();
            var dto = await response.Content.ReadFromJsonAsync<ShodanResponseDto>();


            if (dto?.vulns == null)
            {
                return new AutomaticCheckAuditRow
                {
                    AutomaticCheck = automaticCheck,
                    Passed = false,
                    Comment = "Server did not scan your ip yet, try again later"
                };
            }

            return new AutomaticCheckAuditRow
            {
                AutomaticCheck = automaticCheck,
                Passed = dto?.vulns?.Length == 0,
                Comment = string.Join(", ", dto.vulns)
            };
        }
        catch
        {
            return new AutomaticCheckAuditRow
            {
                AutomaticCheck = automaticCheck,
                Passed = false,
                Comment = "Could not connect to vulnerability api, try again later"
            };
        }
    }
}

public class ShodanResponseDto
{
    public string[]? vulns { get; set; }
}