using System.Net;
using System.Text;
using Microsoft.EntityFrameworkCore;
using Nmap.NET;
using Nmap.NET.Container;
using PenTest.Interfaces;
using Repository;
using Repository.Entities;

namespace PenTest.Services;

public class PortScanService(PgContext context) : IPortScanService
{
    private static readonly int[] UnsafePorts = [22];
    private static readonly int[] SafePorts = [80, 443];

    private const string AutoCheckName = "Ports";

    public async Task<AutomaticCheckAuditRow> Scan(string domain)
    {
        var automaticCheck = await context.AutomaticChecks
            .Where(c => c.Name == AutoCheckName)
            .FirstAsync();

        try
        {
            var ipAddresses = await Dns.GetHostAddressesAsync(domain);
            var ip = ipAddresses[0]; // Use first resolved IP

            var target = new Target(ip);
            var scanner = new Scanner(target);

            var scanResult = scanner.PortScan();

            var ports = scanResult?.Hosts?
                .SelectMany(x => x.Ports)
                .Select(p => p.PortNumber)
                .ToList();
        
            var hostUnsafePorts = ports.Where(p => UnsafePorts.Contains(p)).ToList();
            var hostSafePorts = ports.Where(p => SafePorts.Contains(p)).ToList();
            var hostUnknownPorts = ports
                .Where(p => !UnsafePorts.Contains(p))
                .Where(p => !SafePorts.Contains(p))
                .ToList();

            var comment = new StringBuilder();
            
            if (hostUnsafePorts.Count != 0) comment.Append($"Unsafe ports: {string.Join(", ", hostUnsafePorts)}. ");
            if (hostUnknownPorts.Count != 0) comment.Append($"Unknown ports: {string.Join(", ", hostUnknownPorts)}. ");
            if (hostSafePorts.Count != 0) comment.Append($"Safe ports: {string.Join(", ", hostSafePorts)}. ");
            
            return new AutomaticCheckAuditRow
            {
                AutomaticCheck = automaticCheck,
                Passed = hostUnsafePorts.Count == 0,
                Comment = comment.ToString()
            };
        }
        catch
        {
            return new AutomaticCheckAuditRow
            {
                AutomaticCheck = automaticCheck,
                Passed = false,
                Comment = "Failed to scan ip, make sure ip is valid"
            };
        }
    }
}